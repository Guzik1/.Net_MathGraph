<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Graph</name>
    </assembly>
    <members>
        <member name="T:Graph.Edge`2">
            <summary>
            Object repersent a edge from graph, beetwen two node (node from to node to).
            </summary>
            <typeparam name="TypeOfNodeData">Type of node data.</typeparam>
            <typeparam name="TypeOfEdgeData">Type of edge data.</typeparam>
        </member>
        <member name="P:Graph.Edge`2.NodeFrom">
            <summary>
            The begin node.
            </summary>
        </member>
        <member name="P:Graph.Edge`2.NodeTo">
            <summary>
            The end node.
            </summary>
        </member>
        <member name="P:Graph.Edge`2.Data">
            <summary>
            Edge data.
            </summary>
        </member>
        <member name="P:Graph.Edge`2.Weight">
            <summary>
            Edge weight
            </summary>
        </member>
        <member name="M:Graph.Edge`2.ToString">
            <summary>
            Convert this object to string.
            Converting format:
            </summary>
            <code>return $"Edge: { NodeFrom.Data } -> { NodeTo.Data }, weight { Weight }, data: { Data.ToString() }"</code>
            <returns>String of Edge object.</returns>
        </member>
        <member name="T:Graph.Graph`2">
            <summary>
            This class represent a mathematical graph with data in nodes and edges. This version can't be serialized.
            </summary>
            <typeparam name="TypeOfNodeData">Type of data in nodes.</typeparam>
            <typeparam name="TypeOfEdgeData">Type of data in edges.</typeparam>
        </member>
        <member name="M:Graph.Graph`2.GetShortestPathDijkstraAlgorithm(Graph.Node{`0,`1},Graph.Node{`0,`1})">
            <summary>
            Algorithm to get a short Dijkstra path.
            </summary>
            <param name="source">Source node to start of the path.</param>
            <param name="target">Destination node to end of the path.</param>
            <returns></returns>
        </member>
        <member name="P:Graph.Graph`2.IsDirected">
            <summary>
            Return true when graph is directed or otherwise return false.
            </summary>
        </member>
        <member name="P:Graph.Graph`2.IsWeighted">
            <summary>
            Return true when graph is weighted or otherwise return false.
            </summary>
        </member>
        <member name="M:Graph.Graph`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Inicajlizing the graph, select whether it is a weighted or a directed chart.
            </summary>
            <param name="isDirected">Set true for initialize directed graph, or false for inicjalize undirected graph.</param>
            <param name="isWeighted">Set true for initialize weighted graph, or false for inicjalize unweighted graph.</param>
        </member>
        <member name="M:Graph.Graph`2.#ctor(System.Boolean)">
            <summary>
            Inicajlizing the graph, select whether it is a weighted graph.
            </summary>
            <param name="isWeighted">Set true for initialize weighted graph, or false for inicjalize unweighted graph.</param>
        </member>
        <member name="M:Graph.Graph`2.#ctor">
            <summary>
            Inicajlizing the simple graph (unweighted and undirected graph).
            </summary>
        </member>
        <member name="P:Graph.Graph`2.Item(System.Int32,System.Int32)">
            <summary>
            Get the edge between two nodes (node from and node to).
            </summary>
            <param name="nodeFromId">Node id where the edge begin.</param>
            <param name="nodeToId">Node id where the edge end.</param>
            <returns>Edge between node FROM and node TO.</returns>
        </member>
        <member name="P:Graph.Graph`2.Item(System.Int32)">
            <summary>
            Get the node reference from node id.
            </summary>
            <param name="nodeNumber">Id of node.</param>
            <returns>Node reference</returns>
        </member>
        <member name="P:Graph.Graph`2.NodesCount">
            <summary>
            Get nodes count in graph.
            </summary>
            <returns>Nodes count</returns>
        </member>
        <member name="M:Graph.Graph`2.AddNode(`0)">
            <summary>
            Add node to graph.
            </summary>
            <param name="value">Data in node.</param>
            <returns>Return added node to list of all nodes.</returns>
        </member>
        <member name="M:Graph.Graph`2.RemoveNode(Graph.Node{`0,`1})">
            <summary>
            Remove node from the graph.
            </summary>
            <param name="nodeToRemove">Node to remove.</param>
        </member>
        <member name="M:Graph.Graph`2.AddEdge(Graph.Node{`0,`1},Graph.Node{`0,`1},System.Int32,`1)">
            <summary>
            Add edge between two node (from, to) and data in edge. For weighted graph add also weight.
            </summary>
            <param name="from">Node from the edge begin.</param>
            <param name="to">Node to the edge end.</param>
            <param name="weight">Weight of edge, default 0 (use for weighted graph)</param>
            <param name="edgeData">The edge data, default 'default of data'.</param>
        </member>
        <member name="M:Graph.Graph`2.RemoveEdge(Graph.Node{`0,`1},Graph.Node{`0,`1})">
            <summary>
            Remove a edge between node FROM and node TO.
            </summary>
            <param name="nodeFrom">Node where the edge begin.</param>
            <param name="nodeTo">Node where the edge end.</param>
        </member>
        <member name="M:Graph.Graph`2.GetAllEdges">
            <summary>
            Get all of edge in graph.
            </summary>
            <returns>List of all edges in graph.</returns>
        </member>
        <member name="T:Graph.Node`2">
            <summary>
            Represent a Node in graph, with id, data in node, list of neighbor, weights and edges data.
            </summary>
            <typeparam name="TypeOfNodeData">Type of Node data.</typeparam>
            <typeparam name="TypeOfEdgeData">Type of Edge data.</typeparam>
        </member>
        <member name="P:Graph.Node`2.Index">
            <summary>
            Index of node (use inside, may change when removing nodes).
            </summary>
        </member>
        <member name="P:Graph.Node`2.Data">
            <summary>
            Data of node.
            </summary>
        </member>
        <member name="P:Graph.Node`2.Neighbors">
            <summary>
            List of neighboring nodes (nodes connected by the edge).
            </summary>
        </member>
        <member name="P:Graph.Node`2.Weights">
            <summary>
            Weight of edge, from this node to neighboring nodes.
            </summary>
        </member>
        <member name="P:Graph.Node`2.EdgeData">
            <summary>
            Data edge from this node to neighboring nodes.
            </summary>
        </member>
        <member name="M:Graph.Node`2.ToString">
            <summary>
            Convert this object to string.
            Converting format:
            </summary>
            <code>return $"Node id { Index }, data: { Data }, neighbors count: { Neighbors.Count }"</code>
            <returns>String of Node object.</returns>
        </member>
        <member name="T:Graph.SerializableConverter.SerializableEdge`1">
            <summary>
            Object repersent a edge from graph. This version can be serialized.
            </summary>
            <typeparam name="TypeOfEdgeData">Type of edge data.</typeparam>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableEdge`1.NodeFromId">
            <summary>
            The begin node id.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableEdge`1.NodeToId">
            <summary>
            The end node id.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableEdge`1.Data">
            <summary>
            Edge data.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableEdge`1.Weight">
            <summary>
            Edge weight
            </summary>
        </member>
        <member name="T:Graph.SerializableConverter.SerializableGraphDataModel`2">
            <summary>
            This class represent a mathematical graph with data in nodes and edges. This version can be serialized.
            </summary>
            <typeparam name="TypeOfNodeData">Type of data in nodes.</typeparam>
            <typeparam name="TypeOfEdgeData">Type of data in edges.</typeparam>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableGraphDataModel`2.IsDirected">
            <summary>
            Return true when graph is directed or otherwise return false.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableGraphDataModel`2.IsWeighted">
            <summary>
            Return true when graph is weighted or otherwise return false.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableGraphDataModel`2.Node">
            <summary>
            List of node from graph.
            </summary>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableGraphDataModel`2.Edge">
            <summary>
            List of edge from graph.
            </summary>
        </member>
        <member name="T:Graph.SerializableConverter.SerializableGraphConverter`2">
            <summary>
            Class to convert unserializable graph to serializable graph and vice versa.
            </summary>
            <typeparam name="TypeOfNodeData">Type of node data.</typeparam>
            <typeparam name="TypeOfEdgeData">Type of edge data.</typeparam>
        </member>
        <member name="T:Graph.SerializableConverter.SerializableNode`1">
            <summary>
            Represent a Node in graph. This version can be serialized.
            </summary>
            <typeparam name="TypeOfNodeData">Type of Node data.</typeparam>
        </member>
        <member name="P:Graph.SerializableConverter.SerializableNode`1.Data">
            <summary>
            Data of serializable node.
            </summary>
        </member>
    </members>
</doc>
